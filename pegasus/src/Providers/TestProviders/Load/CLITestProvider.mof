//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
[Version ("2.5.0"), Description(
    "Class to test input and output of all property types that can "
    "be handled by cimcli.") ]
class Test_CLITestProviderClass
{
    [key]
    String Id;

    String Name;

    [Description ("Return name value pair defining input parameters "
    "for the operation received by the provider such as propertylist.")]
    String requestInputParameters;

   // scalar properties
   Boolean scalBool;
   Uint8   scalUint8;
   Sint8   scalSint8;
   Uint16  scalUint16;
   Sint16  scalSint16;
   Uint32  scalUint32;
   Sint32  scalSint32;
   Uint64  scalUint64;
   Sint64  scalSint64;
   Real32  scalReal32;
   Real64  scalReal64;
   String  scalString;
   Datetime scalDateTime;

   // Scalar properties with default values
   // scalar property tests
   Boolean defaultBool = true;
   Uint8   defaultUint8 = 4;
   Sint8   defaultSint8 = 4;
   Uint16  defaultUint16 = 4;
   Sint16  defaultSint16 = 4;
   Uint32  defaultUint32 = 4;
   Sint32  defaultSint32 = 4;
   Uint64  defaultUint64 = 4;
   Sint64  defaultSint64 = 4;
   Real32  defaultReal32;
   Real64  defaultReal64;
   String  defaultString = "test\"embedded\"quote";
   Datetime defaultDateTime;

   // Array Properties
   Boolean arrayBool[];
   Uint8   arrayUint8[];
   Sint8   arraySint8[];
   Uint16  arrayUint16[];
   Sint16  arraySint16[];
   Uint32  arrayUint32[];
   Sint32  arraySint32[];
   Uint64  arrayUint64[];
   Sint64  arraySint64[];
   Real32  arrayReal32[];
   Real64  arrayReal64[];
   String  arrayString[];
   Datetime arrayDateTime[];

   uint32 ReferenceParamTest(
        [in] uint32 InParam1,
        [out] uint32 OutParam2);

   [ Description("Method to test input and output of all "
        "parameter types. Provider is expected to return "
	"all parameters input.") ]
   uint32 InOutParamTest(
        [in, out] Boolean scalBool,
	[in, out] Uint8   scalUint8,
	[in, out] Sint8   scalSint8,
	[in, out] Uint16  scalUint16,
	[in, out] Sint16  scalSint16,
	[in, out] Uint32  scalUint32,
	[in, out] Sint32  scalSint32,
	[in, out] Uint64  scalUint64,
	[in, out] Real32  scalReal32,
	[in, out] Real64  scalReal64,
	[in, out] String  scalString,
	[in, out] Datetime scalDateTime,
	[in, out]   Boolean arrayBool[],
	[in, out]  Uint8   arrayUint8[],
	[in, out]  Sint8   arraySint8[],
	[in, out]  Uint16  arrayUint16[],
	[in, out]  Sint16  arraySint16[],
	[in, out]  Uint32  arrayUint32[],
	[in, out]  Sint32  arraySint32[],
	[in, out]  Uint64  arrayUint64[],
	[in, out]  Real32  arrayReal32[],
	[in, out] Real64  arrayReal64[],
	[in, out] String  arrayString[],
	[in, out] Datetime arrayDateTime[],
	[in, out] Uint32 returnValue
	);
	  
   // Test input and output of all parameter types
   uint32 FullParamTest(
        [in] Boolean inScalBool,
	[in] Uint8   inScalUint8,
	[in] Sint8   inScalSint8,
	[in] Uint16  inScalUint16,
	[in] Sint16  inScalSint16,
	[in] Uint32  inScalUint32,
	[in] Sint32  inScalSint32,
	[in] Uint64  inScalUint64,
	[in] Real32  inScalReal32,
	[in] Real64  inScalReal64,
	[in] String  inScalString,
	[in] Datetime inScalDateTime,

        [out] Boolean outScalBool,
	[out] Uint8   outScalUint8,
	[out] Sint8   outScalSint8,
	[out] Uint16  outScalUint16,
	[out] Sint16  outScalSint16,
	[out] Uint32  outScalUint32,
	[out] Sint32  outScalSint32,
	[out] Uint64  outScalUint64,
	[out] Real32  outScalReal32,
	[out] Real64  outScalReal64,
	[out] String  outScalString,
	[out] Datetime outScalDateTime
	);

   [ Description("Method to set parameters to modify provider behavior") ]
   uint32 setProviderParameters(
        [in, out] String substituteHostName
	);

   [ Description("Method to reset all parameters provider behavior "
       " parameters") ]
   uint32 resetProviderParameters();
};

[Association, Version("1.0.0"), Description("Defines the "
    "relationship between parents and children. "
    "Test Ref/Assoc functions in cimli") ]
class Test_CLITestProviderLinkClass
{
    [key] Test_CLITestProviderClass ref parent;
    [key] Test_CLITestProviderClass ref child;
    String requestInputParameters;
};
